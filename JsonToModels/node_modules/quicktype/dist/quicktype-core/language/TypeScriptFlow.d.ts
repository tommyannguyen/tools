import { Type, UnionType, ClassType, EnumType } from "../Type";
import { Sourcelike } from "../Source";
import { Name } from "../Naming";
import { BooleanOption, Option, OptionValues } from "../RendererOptions";
import { JavaScriptTargetLanguage, JavaScriptRenderer } from "./JavaScript";
import { TargetLanguage } from "../TargetLanguage";
import { RenderContext } from "../Renderer";
export declare const tsFlowOptions: {
    runtimeTypecheck: BooleanOption;
} & {
    justTypes: BooleanOption;
    declareUnions: BooleanOption;
};
export declare abstract class TypeScriptFlowBaseTargetLanguage extends JavaScriptTargetLanguage {
    protected getOptions(): Option<any>[];
    readonly supportsOptionalClassProperties: boolean;
    protected abstract makeRenderer(renderContext: RenderContext, untypedOptionValues: {
        [name: string]: any;
    }): JavaScriptRenderer;
}
export declare class TypeScriptTargetLanguage extends TypeScriptFlowBaseTargetLanguage {
    constructor();
    protected makeRenderer(renderContext: RenderContext, untypedOptionValues: {
        [name: string]: any;
    }): TypeScriptRenderer;
}
export declare abstract class TypeScriptFlowBaseRenderer extends JavaScriptRenderer {
    private readonly _tsFlowOptions;
    constructor(targetLanguage: TargetLanguage, renderContext: RenderContext, _tsFlowOptions: OptionValues<typeof tsFlowOptions>);
    private sourceFor(t);
    protected abstract emitEnum(e: EnumType, enumName: Name): void;
    protected abstract emitClassBlock(c: ClassType, className: Name): void;
    protected emitClassBlockBody(c: ClassType): void;
    private emitClass(c, className);
    emitUnion(u: UnionType, unionName: Name): void;
    protected emitTypes(): void;
    protected emitUsageComments(): void;
    protected deserializerFunctionLine(t: Type, name: Name): Sourcelike;
    protected serializerFunctionLine(t: Type, name: Name): Sourcelike;
    protected readonly moduleLine: string | undefined;
    protected readonly castFunctionLine: string;
    protected readonly typeAnnotations: {
        any: string;
        anyArray: string;
        anyMap: string;
        string: string;
        stringArray: string;
        boolean: string;
    };
    protected emitConvertModule(): void;
}
export declare class TypeScriptRenderer extends TypeScriptFlowBaseRenderer {
    protected forbiddenNamesForGlobalNamespace(): string[];
    protected deserializerFunctionLine(t: Type, name: Name): Sourcelike;
    protected serializerFunctionLine(t: Type, name: Name): Sourcelike;
    protected readonly moduleLine: string | undefined;
    protected emitModuleExports(): void;
    protected emitUsageImportComment(): void;
    protected emitEnum(e: EnumType, enumName: Name): void;
    protected emitClassBlock(c: ClassType, className: Name): void;
}
export declare class FlowTargetLanguage extends TypeScriptFlowBaseTargetLanguage {
    constructor();
    protected makeRenderer(renderContext: RenderContext, untypedOptionValues: {
        [name: string]: any;
    }): FlowRenderer;
}
export declare class FlowRenderer extends TypeScriptFlowBaseRenderer {
    protected forbiddenNamesForGlobalNamespace(): string[];
    protected emitEnum(e: EnumType, enumName: Name): void;
    protected emitClassBlock(c: ClassType, className: Name): void;
    protected emitSourceStructure(): void;
}
