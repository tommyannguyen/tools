"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const storage = require("./storage");
const analytics_1 = require("./analytics");
const chalk = require("chalk");
let analytics = new analytics_1.NoAnalytics();
function init() {
    return __awaiter(this, void 0, void 0, function* () {
        yield storage.init();
        if (state() === "enabled") {
            analytics = new analytics_1.GoogleAnalytics();
        }
    });
}
exports.init = init;
function pageview(page) {
    analytics.pageview(page);
}
exports.pageview = pageview;
function timing(category, variable, time) {
    analytics.timing(category, variable, time);
}
exports.timing = timing;
function event(category, action, label, value) {
    analytics.event(category, action, label, value);
}
exports.event = event;
function enable() {
    if (state() !== "enabled") {
        console.error(chalk.green("Thank you for enabling telemetry. It helps us make quicktype even better!"));
    }
    setState("enabled");
    analytics = new analytics_1.GoogleAnalytics();
}
exports.enable = enable;
function disable() {
    if (state() !== "disabled") {
        console.error("Telemetry disabled. To support quicktype in other ways, please share it.");
    }
    setState("disabled");
    analytics = new analytics_1.NoAnalytics();
}
exports.disable = disable;
function state() {
    return storage.get("analyticsState", "none", "disabled");
}
exports.state = state;
function setState(newState) {
    storage.set("analyticsState", newState);
}
exports.setState = setState;
function timeAsync(variable, work) {
    return __awaiter(this, void 0, void 0, function* () {
        const start = new Date().getTime();
        const result = yield work();
        const end = new Date().getTime();
        timing("default", variable, end - start);
        return result;
    });
}
exports.timeAsync = timeAsync;
exports.TELEMETRY_HEADER = `Please help improve quicktype by enabling anonymous telemetry with:

  $ quicktype --telemetry enable

You can also enable telemetry on any quicktype invocation:

  $ quicktype pokedex.json -o Pokedex.cs --telemetry enable

This helps us improve quicktype by measuring:

  * How many people use quicktype
  * Which features are popular or unpopular
  * Performance
  * Errors

quicktype does not collect:

  * Your filenames or input data
  * Any personally identifiable information (PII)
  * Anything not directly related to quicktype's usage

If you don't want to help improve quicktype, you can dismiss this message with:

  $ quicktype --telemetry disable

For a full privacy policy, visit app.quicktype.io/privacy
`;
