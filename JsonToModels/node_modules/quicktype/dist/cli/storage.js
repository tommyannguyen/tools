"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const os_1 = require("os");
const persist = require("node-persist");
// Users of quicktype as a library shouldn't have to init telemetry.
let inited = false;
function init() {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            yield persist.init({
                dir: path.join(os_1.homedir(), ".quicktype")
            });
        }
        catch (error) {
            console.error(`Could not initialize persistence`, error);
        }
        inited = true;
    });
}
exports.init = init;
function get(name, def, onError) {
    if (inited) {
        try {
            let v = persist.getItemSync(name);
            if (v === undefined) {
                set(name, def);
                v = def;
            }
            return v;
        }
        catch (error) {
            console.error(`Could not get ${name}`, error);
        }
    }
    return onError !== undefined ? onError : def;
}
exports.get = get;
function set(name, val) {
    if (!inited)
        return;
    try {
        persist.setItemSync(name, val);
    }
    catch (error) {
        console.error(`Could not set ${name}`, error);
    }
}
exports.set = set;
